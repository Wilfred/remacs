name: Remacs CI

on:
  pull_request:
    # paths:
    # - 'lib/**'
    # - 'lib-src/**'
    # - 'src/**'
    # - 'rust_src/**'

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: setup Rust version
      run: rustup toolchain install $(cat rust-toolchain)
    - name: install Rustfmt
      run: rustup component add rustfmt
    - name: rustfmt version
      run: cargo fmt -- --version
    - name: setup Cargo.toml
      working-directory: ./rust_src
      # This is more expedient than running configure.
      # Unlike Clippy, none of it matters.
      run: grep -v '@CARGO' Cargo.toml.in > Cargo.toml
    - name: run rustfmt
      working-directory: ./rust_src
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: setup Rust version
      run: rustup toolchain install $(cat rust-toolchain)
    - name: install Clippy
      run: rustup component add clippy
    - name: install dependencies
      run: sudo apt-get update -y && sudo apt-get install -y libgnutls28-dev libgif-dev libxmp-dev libgtk-3-dev libxpm-dev
    - name: autogen
      run: ./autogen.sh
    - name: configure
      run: ./configure --without-makeinfo
    - name: make-docfile
      run: make -C lib-src make-docfile
    - name: globals.h
      run: make -C src globals.h
    - name: run Clippy
      run: make clippy

  linux-no-gui-build:
    name: Linux no GUI build
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy]

    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: setup Rust version
      run: rustup toolchain install $(cat rust-toolchain)
    - name: Dependencies
      run: sudo apt-get update -y && sudo apt-get install -y libgnutls28-dev
    - name: autogen
      run: ./autogen.sh
    - name: configure
      run: ./configure --without-makeinfo --with-x=no --without-gconf --without-gsettings
    - name: make
      run: make -j 3
    - name: make check
      run: make check

  linux-full-build:
    name: Linux full build
    runs-on: ubuntu-latest
    needs: [rustfmt, clippy]

    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: setup Rust version
      run: rustup toolchain install $(cat rust-toolchain)
    - name: Dependencies
      run: sudo apt-get update -y && sudo apt-get install -y libgnutls28-dev libgif-dev libxmp-dev libgtk-3-dev libxpm-dev
    - name: autogen
      run: ./autogen.sh
    - name: configure
      run: ./configure --without-makeinfo
    - name: make
      run: make -j 3
    - name: make check
      run: make check

  mac-no-gui-build:
    name: Mac no GUI build
    runs-on: macos-10.15
    needs: [rustfmt, clippy]

    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: setup Rust version
      run: rustup toolchain install $(cat rust-toolchain)
    - name: Dependencies
      run: brew install pkg-config gnutls libxml2
    - name: autogen
      run: ./autogen.sh
    - name: configure
      run: ./configure --without-makeinfo --with-ns=no
    - name: make
      run: make -j 3
    - name: make check
      run: make check
